admin:
  accessLogPath: /dev/stdout
  address:
    socketAddress:
      address: 0.0.0.0
      portValue: 9901
dynamic_resources:
  cds_config:
    api_config_source:
      api_type: GRPC
      grpc_services:
        envoy_grpc:
          cluster_name: xds
staticResources:
  clusters:
  - connectTimeout: 0.250s
    http2ProtocolOptions: {}
    loadAssignment:
      clusterName: xds
      endpoints:
      - lbEndpoints:
        - endpoint:
            address:
              socketAddress:
                address: xds-sidecar
                portValue: 10000
    name: xds
    type: STRICT_DNS
  listeners:
  - address:
      socketAddress:
        address: 0.0.0.0
        portValue: 10000
    filterChains:
    - filters:
      - config:
          accessLog:
          - config:
              format: >
                listener=ingress start_time=%START_TIME%
                req_method=%REQ(:METHOD)% req_path=%REQ(:PATH)% protocol=%PROTOCOL%
                response_code=%RESPONSE_CODE% response_flags=%RESPONSE_FLAGS%
                bytes_reveived=%BYTES_RECEIVED% bytes_sent=%BYTES_SENT% duration=%DURATION%
                resp_x_envoy_upstream_service_time=%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%
                req_x_envoy_original_path=%REQ(X-ENVOY-ORIGINAL-PATH)% req_x_forwarded_for=%REQ(X-FORWARDED-FOR)%
                req_user_agent="%REQ(USER-AGENT)%" req_x_request_id=%REQ(X-REQUEST-ID)%
                req_authority=%REQ(:AUTHORITY)% upstream_host=%UPSTREAM_HOST% upstream_cluster=%UPSTREAM_CLUSTER%
                resp_grpc_status=%RESP(grpc-status) %resp_grpc_message="%RESP(grpc-message)%"
                trailer_grpc_status=%TRAILER(grpc-status)% trailer_grpc_message="%TRAILER(grpc-message)%"
              path: /dev/stdout
            name: envoy.file_access_log
          httpFilters:
          - name: envoy.grpc_web
          - name: envoy.grpc_json_transcoder
            config:
              print_options:
                add_whitespace: true
                preserve_proto_field_names: true
                always_print_primitive_fields: true
              proto_descriptor: /etc/pb/users/v2/v2.pb
              services:
                - gomesh.users.v2.Users
          - name: envoy.grpc_json_transcoder
            config:
              print_options:
                add_whitespace: true
                preserve_proto_field_names: true
                always_print_primitive_fields: true
              proto_descriptor: /etc/pb/widgets/v2/v2.pb
              services:
                - gomesh.widgets.v2.Widgets
          - name: envoy.router
          routeConfig:
            name: local
            virtualHosts:
            - domains:
              - '*'
              name: local
              routes:
              - match:
                  prefix: /gomesh.users.v2.Users
                route:
                  cluster: users-v2-sidecar
              - match:
                  prefix: /gomesh.widgets.v2.Widgets
                route:
                  cluster: widgets-v2-sidecar
            validate_clusters: false  # defer to CDS
          statPrefix: ingress_http
        name: envoy.http_connection_manager
    name: ingress
