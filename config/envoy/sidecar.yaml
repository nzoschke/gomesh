admin:
  accessLogPath: /dev/stdout
  address:
    socketAddress:
      address: 0.0.0.0
      portValue: 9901
staticResources:
  clusters:
  - connectTimeout: 0.250s
    http2ProtocolOptions: {}
    loadAssignment:
      clusterName: local
      endpoints:
      - lbEndpoints:
        - endpoint:
            address:
              socketAddress:
                address: local
                portValue: 8000
    name: local
    type: STRICT_DNS
  listeners:
  - address:
      socketAddress:
        address: 0.0.0.0
        portValue: 11000
    filterChains:
    - filters:
      - config:
          accessLog:
          - config:
              format: >
                listener=egress start_time=%START_TIME%
                req_method=%REQ(:METHOD)% req_path=%REQ(:PATH)% protocol=%PROTOCOL%
                response_code=%RESPONSE_CODE% response_flags=%RESPONSE_FLAGS%
                bytes_reveived=%BYTES_RECEIVED% bytes_sent=%BYTES_SENT% duration=%DURATION%
                resp_x_envoy_upstream_service_time=%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%
                req_x_envoy_original_path=%REQ(X-ENVOY-ORIGINAL-PATH)% req_x_forwarded_for=%REQ(X-FORWARDED-FOR)%
                req_user_agent="%REQ(USER-AGENT)%" req_x_request_id=%REQ(X-REQUEST-ID)%
                req_authority=%REQ(:AUTHORITY)% upstream_host=%UPSTREAM_HOST% upstream_cluster=%UPSTREAM_CLUSTER%
                resp_grpc_status=%RESP(grpc-status)% resp_grpc_message="%RESP(grpc-message)%"
                trailer_grpc_status=%TRAILER(grpc-status)% trailer_grpc_message="%TRAILER(grpc-message)%"
              path: /dev/stdout
            name: envoy.file_access_log
          httpFilters:
          - name: envoy.router
          routeConfig:
            name: local
            virtualHosts:
            - domains:
              - "*"
              name: local
              routes:
              - match:
                  prefix: /
                route:
                  cluster_header: :authority
          statPrefix: egress_http
        name: envoy.http_connection_manager
    name: egress
  - address:
      socketAddress:
        address: 0.0.0.0
        portValue: 10000
    filterChains:
    - filters:
      - config:
          accessLog:
          - config:
              format: >
                listener=ingress start_time=%START_TIME%
                req_method=%REQ(:METHOD)% req_path=%REQ(:PATH)% protocol=%PROTOCOL%
                response_code=%RESPONSE_CODE% response_flags=%RESPONSE_FLAGS%
                bytes_reveived=%BYTES_RECEIVED% bytes_sent=%BYTES_SENT% duration=%DURATION%
                resp_x_envoy_upstream_service_time=%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%
                req_x_envoy_original_path=%REQ(X-ENVOY-ORIGINAL-PATH)% req_x_forwarded_for=%REQ(X-FORWARDED-FOR)%
                req_user_agent="%REQ(USER-AGENT)%" req_x_request_id=%REQ(X-REQUEST-ID)%
                req_authority=%REQ(:AUTHORITY)% upstream_host=%UPSTREAM_HOST% upstream_cluster=%UPSTREAM_CLUSTER%
                resp_grpc_status=%RESP(grpc-status)% resp_grpc_message="%RESP(grpc-message)%"
                trailer_grpc_status=%TRAILER(grpc-status)% trailer_grpc_message="%TRAILER(grpc-message)%"
              path: /dev/stdout
            name: envoy.file_access_log
          httpFilters:
          - name: envoy.grpc_http1_bridge
          - name: envoy.grpc_web
          - name: envoy.router
          routeConfig:
            name: local
            virtualHosts:
            - domains:
              - '*'
              name: local
              routes:
              - match:
                  prefix: /
                route:
                  cluster: local
          statPrefix: ingress_http
        name: envoy.http_connection_manager
    name: ingress
stats_config:
  stats_tags:
    - regex: '^cluster(?=\.).*?\.grpc(-(.*?))\.'                         # web
      tag_name: envoy.grpc_format
    - regex: '^cluster(?=\.).*?\.grpc(?:-web)?\.((.*)\.(?:.*)\.)'        # myservice.widgets.v0.Widgets (greedy)
      tag_name: envoy.grpc_service
    - regex: '^cluster(?=\.).*?\.grpc(?:-web)?\.((?:.*)\.(.*)\.)'        # Get
      tag_name: envoy.grpc_method
    - regex: '^cluster(?=\.).*?\.grpc(?:-web)?(\.(?:.*)\.(?:.*)\.(\d+))' # 0 (and remove leading dot)
      tag_name: envoy.grpc_code
    - fixed_value: ${SERVICE_NAME}
      tag_name: service
